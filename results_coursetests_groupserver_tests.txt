============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 359 items

http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable FAILED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner PASSED [  3%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions FAILED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token PASSED [  5%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions PASSED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[12345] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_removed_user_name PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[Bob-Smith-bobsmith] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct FAILED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere PASSED [ 12%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_cant_addowner_when_non_member PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public FAILED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_member_successful PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_cant_join_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token PASSED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_message_timestamp PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token PASSED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_users PASSED   [ 34%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_one_invalid PASSED [ 34%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token PASSED         [ 34%]
http_tests/dm_tests/test_dm_details.py::test_member_successful PASSED    [ 35%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token PASSED        [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_leave_dm_when_not_member PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 37%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 38%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token PASSED       [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent PASSED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent PASSED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id PASSED         [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token PASSED         [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_token PASSED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique PASSED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique_iter3 PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_channel_owner_in_channel PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_dm_owner_in_dm PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_global_owner_in_channel PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin FAILED [ 47%]
http_tests/message_tests/test_message_pin.py::test_global_owner_cant_pin_in_dm FAILED [ 47%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin PASSED [ 48%]
http_tests/message_tests/test_message_pin.py::test_invalid_token PASSED  [ 48%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel FAILED [ 48%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message FAILED [ 49%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react PASSED [ 50%]
http_tests/message_tests/test_message_react.py::test_invalid_token PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 52%]
http_tests/message_tests/test_message_remove.py::test_invalid_token PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_invalid_channel PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_token PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_valid_message PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm PASSED  [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_returns_immediately PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_nonmember_cannot_sendlater PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_message_too_long PASSED [ 57%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel PASSED [ 57%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token PASSED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message PASSED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_returns_immediately PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmember_cannot_sendlater PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long PASSED [ 59%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm PASSED [ 59%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token PASSED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel FAILED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_invalid_token FAILED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_channel_owner_in_channel PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_dm_owner_in_dm PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_global_owner_in_channel FAILED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin PASSED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_global_owner_cant_unpin_in_dm FAILED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin PASSED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id PASSED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice PASSED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact PASSED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token PASSED [ 67%]
http_tests/other_tests/test_clear.py::test_clear_works PASSED            [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification PASSED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification PASSED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification FAILED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification PASSED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] FAILED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token PASSED [ 72%]
http_tests/other_tests/test_search.py::test_no_matches PASSED            [ 72%]
http_tests/other_tests/test_search.py::test_single_match PASSED          [ 72%]
http_tests/other_tests/test_search.py::test_multiple_matches PASSED      [ 72%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined PASSED [ 73%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels PASSED [ 73%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user PASSED [ 73%]
http_tests/other_tests/test_search.py::test_invalid_search[] PASSED      [ 74%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 74%]
http_tests/other_tests/test_search.py::test_invalid_token PASSED         [ 74%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 74%]
http_tests/other_tests/test_users_all.py::test_invalid_token PASSED      [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] PASSED [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] PASSED [ 75%]
http_tests/standup_tests/test_standup_active.py::test_active_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token PASSED [ 76%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_return_format PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token PASSED [ 78%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_returns_immediately PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_invalid_standup_length PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token PASSED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct FAILED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create PASSED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join FAILED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave FAILED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share FAILED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token PASSED     [ 85%]
http_tests/stats_tests/test_users_stats.py::test_return_type_correct FAILED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_channels_tracked_channels_create PASSED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_create PASSED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_remove PASSED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_send PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_sendlater PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddm PASSED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddmlater PASSED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_share FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_standup_finish PASSED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_edited_to_removal FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_deleted FAILED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_dm_removed FAILED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_utilization_tracked PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_invalid_token PASSED    [ 89%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token PASSED    [ 90%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_x_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_y_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url FAILED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token PASSED [100%]

====== Marks recorded: 155.90 ======


=================================== FAILURES ===================================
___________________ test_once_removed_user_cant_do_anything ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_once_removed_user_cant_do_anything(user_woody, user_zerg, woodys_public_toybox, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_______________ test_messages_after_user_removal_correct_format ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f3170057a60>
ctx = None

    def test_messages_after_user_removal_correct_format(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
        message_factory(user_zerg, woodys_public_toybox, 'hi')
    
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________ test_removed_profile_still_fetchable_with_user_profile ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
ctx = None

    def test_removed_profile_still_fetchable_with_user_profile(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________ test_removal_removed_from_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    def test_removal_removed_from_channel(user_woody, user_zerg, woodys_public_toybox, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    def test_removal_removed_from_dm(user_woody, user_buzz, woody_and_buzz_dm, ctx):
>       admin_user_remove(user_woody.token, user_buzz.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_email_reusable ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
ctx = None

    def test_email_reusable(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_handle_reusable _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
ctx = None

    def test_handle_reusable(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________ test_nonowner_cant_change_permissions _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
ctx = None

    def test_nonowner_cant_change_permissions(user_woody, user_buzz, ctx):
        with pytest.raises(AccessError):
>           admin_userpermission_change(user_buzz.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_ test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_duplicate_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = auth_register(email1, 'password1', first1, last1, ctx)
>       assert handle1 == user_profile(user1['token'], user1['auth_user_id'], ctx)['user']['handle_str']
E       AssertionError: assert 'bcdefghjklmnopqrst' == '@bcdefgh!jklmn opqrs'
E         - @bcdefgh!jklmn opqrs
E         ? -       -     -
E         + bcdefghjklmnopqrst
E         ?                  +

http_tests/auth_tests/test_auth_register.py:96: AssertionError
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_format_correct(user_woody, ctx):
        assert auth_passwordreset_request(user_woody.email, ctx) == {}
>       assert auth_passwordreset_request("invalid@email.com", ctx) == {}

http_tests/auth_tests/test_passwordreset_request.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:47: in auth_passwordreset_request
    email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________________ test_non_member_cannot_add_owner _______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
ctx = None

    def test_non_member_cannot_add_owner(woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_private ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_private(user_woody, zergs_private_lair, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_woody.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_public _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_public(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________ test_global_owner_nonmember_cannot_remove_owner ________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...I1NiJ9.eyJ1c2VyX2lkIjoyLCJzZXNzaW9uX2lkIjozfQ.2mMC9Y48syJFgW_SZTS9aMPihEm3QxJA0QuKCrfCwhY', handle_str='buzzlightyear')
ctx = None

    def test_global_owner_nonmember_cannot_remove_owner(user_zerg, user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        with pytest.raises(AccessError):
>           channel_removeowner(user_zerg.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_removeowner.py:46: Failed
___________________________ test_dm_member_cant_pin ____________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f31700e7d08>
ctx = None

    @iteration3
    def test_dm_member_cant_pin(user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_buzz, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_pin.py:83: Failed
_______________________ test_global_owner_cant_pin_in_dm _______________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317005df28>
ctx = None

    @iteration3
    def test_global_owner_cant_pin_in_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_pin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_pin.py:90: Failed
_______________________ test_successful_react_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f317004b1e0>
ctx = None

    @iteration3
    def test_successful_react_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}
    
        woodys_vw = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
        buzzs_vw = channel_messages(user_buzz.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
    
        assert user_woody.u_id in woodys_vw['u_ids']
        assert woodys_vw['is_this_user_reacted']
    
        assert user_buzz.u_id not in buzzs_vw['u_ids']
>       assert not buzzs_vw['is_this_user_reacted']
E       assert not True

http_tests/message_tests/test_message_react.py:33: AssertionError
_____________________ test_successful_react_to_dm_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f3170057c80>
ctx = None

    @iteration3
    def test_successful_react_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
        assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}
    
        woodys_vw = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)['messages'][0]['reacts'][0]
        buzzs_vw = dm_messages(user_buzz.token, woody_and_buzz_dm.dm_id, 0, ctx)['messages'][0]['reacts'][0]
    
        assert user_woody.u_id in woodys_vw['u_ids']
        assert woodys_vw['is_this_user_reacted']
    
        assert user_buzz.u_id not in woodys_vw['u_ids']
>       assert not buzzs_vw['is_this_user_reacted']
E       assert not True

http_tests/message_tests/test_message_react.py:49: AssertionError
_______________________ test_successful_share_to_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f3170120950>
ctx = None

    @iteration3
    def test_successful_share_to_channel(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
    
>       shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_successful_share_to_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317001b1e0>
ctx = None

    @iteration3
    def test_successful_share_to_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
    
>       shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f3170057598>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
>           cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317007cf28>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
>           cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_cannot_share_to_unjoined_dm _______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317001ba60>
ctx = None

    @iteration3
    def test_cannot_share_to_unjoined_dm(user_zerg, zergs_private_lair, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_zerg, zergs_private_lair)
        with pytest.raises(AccessError):
>           message_share(user_zerg.token, a_msg.message_id, '', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________ test_cannot_share_to_unjoined_channel _____________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[0], all_members=[])
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f31700f61e0>
ctx = None

    @iteration3
    def test_cannot_share_to_unjoined_channel(user_zerg, zergs_private_lair, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_zerg, zergs_private_lair)
        with pytest.raises(AccessError):
>           message_share(user_zerg.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________ test_cannot_share_from_unjoined_channel ____________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[1], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f317004b268>
ctx = None

    @iteration3
    def test_cannot_share_from_unjoined_channel(user_zerg, user_woody, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_share(user_zerg.token, a_msg.message_id, 'lol', zergs_private_lair.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_cannot_share_from_unjoined_dm ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=0)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f31700e71e0>
ctx = None

    @iteration3
    def test_cannot_share_from_unjoined_dm(user_zerg, user_woody, woody_and_buzz_dm, zergs_private_lair, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(InputError):
>           message_share(user_zerg.token, a_msg.message_id, 'lol',  zergs_private_lair.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________________ test_invalid_og_message_id __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
ctx = None

    @iteration3
    def test_invalid_og_message_id(user_woody, woodys_public_toybox, ctx):
        with pytest.raises(InputError):
>           message_share(user_woody.token, -1, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_invalid_message_length __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f31700cf268>
ctx = None

    @iteration3
    def test_invalid_message_length(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_share(user_woody.token, a_msg.message_id, 'a' * 1001, woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_share_to_invalid_channel_id _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317001d1e0>
ctx = None

    @iteration3
    def test_share_to_invalid_channel_id(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(InputError):
>           message_share(user_woody.token, a_msg.message_id, '', -1, -1, ctx)

http_tests/message_tests/test_message_share.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_share_to_invalid_dm_id __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f31701081e0>
ctx = None

    @iteration3
    def test_share_to_invalid_dm_id(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_share(user_woody.token, a_msg.message_id, '', -1, -1, ctx)

http_tests/message_tests/test_message_share.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f31700e7158>
ctx = None

    @iteration3
    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________ test_successful_unpin_global_owner_in_channel _________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f316ff97840>
ctx = None

    @iteration3
    def test_successful_unpin_global_owner_in_channel(user_buzz, user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        msg_pin(user_buzz.token, a_msg.message_id, ctx) == {}
    
>       assert message_unpin(user_woody.token, a_msg.message_id, ctx) == {}

http_tests/message_tests/test_message_unpin.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:57: in message_unpin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________ test_global_owner_cant_unpin_in_dm ______________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...I1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f316ff97d08>
ctx = None

    @iteration3
    def test_global_owner_cant_unpin_in_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        msg_pin(user_woody.token, a_msg.message_id, ctx)
        with pytest.raises(AccessError):
>           message_unpin(user_buzz.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_unpin.py:101: Failed
______________ test_tag_thru_message_share_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f316ff97f28>
ctx = None

    @iteration3
    def test_tag_thru_message_share_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_share(user_buzz.token, a_msg.message_id, f'@{user_woody.handle_str}', woodys_public_toybox.channel_id, -1,
>                     ctx)

http_tests/other_tests/test_notifications_get.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________________ test_react_triggers_notification[ch] _____________________

dest = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f316ff6f6a8>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, user_buzz, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if dest == 'ch':
            channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
    
        a_msg = message_factory(user_woody, dest)
    
        message_react(user_buzz.token, a_msg.message_id, 1, ctx)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id if dest == woodys_public_toybox else -1,
            'dm_id': woody_and_buzz_dm.dm_id if dest == woody_and_buzz_dm else -1,
            'notification_message': f'{user_buzz.handle_str} reacted to your message in {dest.name}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 0,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in woodys toybox'}]} == {'notifications': [{'channel_id': 0,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear reacted to your '\n                                            'message in woodys toybox'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 0, 'notification_message': 'buzzlightyear reacted to your message in woodys toybox'}]} != {'notifications': [{'channel_id': 0, 'dm_id': -1, 'notification_message': 'buzzlightyear reacted to your message in woodys toybox'}]}
E         Full diff:
E           {
E         -  'notifications': [{'channel_id': 0,
E         ?                                   ^
E         +  'notifications': [{'channel_id': -1,
E         ?                                   ^^
E         -                     'dm_id': -1,
E         ?                              ^^
E         +                     'dm_id': 0,
E         ?                              ^
E                               'notification_message': 'buzzlightyear reacted to your '
E                                                       'message in woodys toybox'}],
E           }

http_tests/other_tests/test_notifications_get.py:156: AssertionError
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_type_correct(user_woody, ctx):
        stats = user_stats(user_woody.token, ctx)
    
        assert 'user_stats' in stats
        stats = stats['user_stats']
    
        assert 'channels_joined' in stats and isinstance(stats['channels_joined'], list)
        assert stats['channels_joined'][-1]['num_channels_joined'] == 0
        assert abs(stats['channels_joined'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'dms_joined' in stats and isinstance(stats['dms_joined'], list)
        assert stats['dms_joined'][-1]['num_dms_joined'] == 0
        assert abs(stats['dms_joined'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'messages_sent' in stats and isinstance(stats['messages_sent'], list)
        assert stats['messages_sent'][-1]['num_messages_sent'] == 0
        assert abs(stats['messages_sent'][-1]['time_stamp'] - utc_now()) <= 2
    
>       assert 'involvement_rate' in stats and isinstance(stats['involvement_rate'], float)
E       AssertionError: assert ('involvement_rate' in {'channels_joined': [{'num_channels_joined': 0, 'time_stamp': 1636976700}], 'dms_joined': [{'num_dms_joined': 0, 'time_stamp': 1636976700}], 'involvement_rate': 0, 'messages_sent': [{'num_messages_sent': 0, 'time_stamp': 1636976700}]} and False)
E        +  where False = isinstance(0, float)

http_tests/stats_tests/test_user_stats.py:38: AssertionError
______________________ test_channels_tracked_channel_join ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=0, owner_members=[1], all_members=[])
ctx = None

    @iteration3
    def test_channels_tracked_channel_join(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:58: AssertionError
__________________________ test_dms_tracked_dm_leave ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
ctx = None

    @iteration3
    def test_dms_tracked_dm_leave(user_woody, woody_and_buzz_dm, ctx):
        dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
        dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
    
>       assert len(dm_stats) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/stats_tests/test_user_stats.py:102: AssertionError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f316ff91488>
ctx = None

    @iteration3
    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/stats_tests/test_user_stats.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________________ test_involvement_tracked ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...iJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJzZXNzaW9uX2lkIjoyfQ.3IlFnyZjb8U5WB33OVJzvu7OYzdYAKPqvmD_oI9z8So', handle_str='lordzerg')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f316ffb7730>
ctx = None

    @iteration3
    def test_involvement_tracked(user_woody, user_zerg, channel_factory, ctx):
        stats = user_stats(user_woody.token, ctx)['user_stats']
        assert stats['involvement_rate'] == 0
    
        channel_factory(user_woody, 'literally anything', True)
    
        stats = user_stats(user_woody.token, ctx)['user_stats']
        assert stats['involvement_rate'] == 1
    
        channel_factory(user_zerg, 'oh no', False)
    
        stats = user_stats(user_woody.token, ctx)['user_stats']
>       assert stats['involvement_rate'] == 0.5
E       assert 1.0 == 0.5
E         +1.0
E         -0.5

http_tests/stats_tests/test_user_stats.py:207: AssertionError
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_type_correct(user_woody, ctx):
        stats = users_stats(user_woody.token, ctx)
    
        assert 'workspace_stats' in stats
        stats = stats['workspace_stats']
    
        assert 'channels_exist' in stats and isinstance(stats['channels_exist'], list)
        assert len(stats['channels_exist']) == 1
        assert stats['channels_exist'][-1]['num_channels_exist'] == 0
        assert abs(stats['channels_exist'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'dms_exist' in stats and isinstance(stats['dms_exist'], list)
        assert len(stats['dms_exist']) == 1
        assert stats['dms_exist'][-1]['num_dms_exist'] == 0
        assert abs(stats['dms_exist'][-1]['time_stamp'] - utc_now()) <= 2
    
        assert 'messages_exist' in stats and isinstance(stats['messages_exist'], list)
        assert len(stats['messages_exist']) == 1
        assert stats['messages_exist'][-1]['num_messages_exist'] == 0
        assert abs(stats['messages_exist'][-1]['time_stamp'] - utc_now()) <= 2
    
>       assert 'utilization_rate' in stats and isinstance(stats['utilization_rate'], float)
E       AssertionError: assert ('utilization_rate' in {'channels_exist': [{'num_channels_exist': 0, 'time_stamp': 1636976706}], 'dms_exist': [{'num_dms_exist': 0, 'time_stamp': 1636976706}], 'messages_exist': [{'num_messages_exist': 0, 'time_stamp': 1636976706}], 'utilization_rate': 0} and False)
E        +  where False = isinstance(0, float)

http_tests/stats_tests/test_users_stats.py:40: AssertionError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f3170168510>
ctx = None

    @iteration3
    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/stats_tests/test_users_stats.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________ test_messages_tracked_edited_to_removal ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f316ffd5488>
ctx = None

    @iteration3
    def test_messages_tracked_edited_to_removal(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_edit(user_woody.token, a_msg.message_id, '', ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/stats_tests/test_users_stats.py:159: AssertionError
________________________ test_messages_tracked_deleted _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=0, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f317005da60>
ctx = None

    @iteration3
    def test_messages_tracked_deleted(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_remove(user_woody.token, a_msg.message_id, ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/stats_tests/test_users_stats.py:172: AssertionError
_______________________ test_messages_tracked_dm_removed _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dm_id=0)
message_factory = <function message_factory.<locals>.make_message at 0x7f317001d620>
ctx = None

    @iteration3
    def test_messages_tracked_dm_removed(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm)
    
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 2 == 3
E         +2
E         -3

http_tests/stats_tests/test_users_stats.py:185: AssertionError
_______________________________ test_invalid_url _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...zI1NiJ9.eyJ1c2VyX2lkIjowLCJzZXNzaW9uX2lkIjoxfQ.WpX1_pFyFCRdZx5hWGJ6AbAXuQR6jvGb4DrsBLENmxo', handle_str='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def test_invalid_url(user_woody, img, ctx):
        with pytest.raises(InputError):
>           user_profile_uploadphoto(user_woody.token, 'http://cgi.cse.unsw.edu.au/~jas/home/pics/jas5.jpg', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

http_tests/user_tests/test_user_profile_uploadphoto.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:68: in user_profile_uploadphoto
    token=token, img_url=img_url, x_start=xmin, y_start=ymin, x_end=xmax, y_end=ymax
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
FAILED http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
FAILED http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner
FAILED http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_global_owner_cant_pin_in_dm
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm
FAILED http_tests/message_tests/test_message_share.py::test_invalid_og_message_id
FAILED http_tests/message_tests/test_message_share.py::test_invalid_message_length
FAILED http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id
FAILED http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id
FAILED http_tests/message_tests/test_message_share.py::test_invalid_token - E...
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_global_owner_in_channel
FAILED http_tests/message_tests/test_message_unpin.py::test_global_owner_cant_unpin_in_dm
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
FAILED http_tests/stats_tests/test_user_stats.py::test_return_type_correct - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - ...
FAILED http_tests/stats_tests/test_users_stats.py::test_return_type_correct
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_edited_to_removal
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_deleted
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_dm_removed
FAILED http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url
================== 47 failed, 312 passed in 69.30s (0:01:09) ===================
